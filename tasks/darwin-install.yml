# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - java_version
  - java_home
  - temp_folder
  - java_download_filename
  - java_download_url
  - java_installation_folder
  - java_bin


# validate if installed

- name: Check if java exists
  stat:
    path: "{{ java_bin }}"
  register: java_exists

- name: Get machine architecture
  command: uname -m
  register: machine_arch
  changed_when: false

- name: Check installed Java architecture
  shell: "{{ java_bin }} -XshowSettings:properties -version 2>&1 | grep 'os.arch' | awk '{print $3}'"
  register: java_arch_result
  when: java_exists.stat.exists
  ignore_errors: yes
  changed_when: false

- name: Map machine architecture to Java architecture format
  set_fact:
    expected_java_arch: "{{ 'aarch64' if machine_arch.stdout == 'arm64' else (machine_arch.stdout if machine_arch.stdout in ['x86_64', 'aarch64'] else 'x86_64') }}"

- name: Check if Java architecture matches machine architecture
  set_fact:
    java_arch_mismatch: "{{ java_exists.stat.exists and java_arch_result.stdout is defined and java_arch_result.stdout != expected_java_arch }}"

- name: Mark Java for replacement due to architecture mismatch
  set_fact:
    java_needs_replacement: "{{ java_arch_mismatch | default(false) }}"
  when: java_arch_mismatch is defined

- name: Display architecture mismatch warning
  debug:
    msg: "Java architecture mismatch detected. Machine: {{ machine_arch.stdout }}, Java: {{ java_arch_result.stdout | default('unknown') }}. Marking for replacement."
  when: java_needs_replacement | default(false)


# install java

- name: Remove existing Java installation due to architecture mismatch
  file:
    path: "{{ java_installation_folder }}"
    state: absent
  become: yes
  when: java_needs_replacement | default(false)

- name: install java
  block:

    - name: make sure temp folder
      file:
        path: "{{ temp_folder }}"
        state: directory
        owner: "{{ ansible_user_id }}"
      become: yes
    
    - name: download java from s3 url
      get_url:
        url: "{{ java_download_url }}"
        dest: "{{ temp_folder }}/{{ java_download_filename }}"
        timeout: "{{ download_timeout | default(60) }}"
      become: yes
      when: custom_download_url == ""

    - name: download zip from custom url
      get_url:
        url: "{{ custom_download_url }}"
        dest: "{{ temp_folder }}/{{ java_download_filename }}"
        timeout: "{{ download_timeout | default(60) }}"
      when: custom_download_url != ""
    
    - name: make sure java installation folder exists
      file:
        path: "{{ java_installation_folder }}"
        state: directory
        owner: "{{ ansible_user_id }}"
      become: yes
    
    - name: unzip java file
      command: "tar -xzvf {{ temp_folder }}/{{ java_download_filename }} -C {{ java_installation_folder }}"
      args:
        creates: "{{ java_bin }}"
      become: yes
      register: unzip_java
      ignore_errors: yes
    
    - name: sleep for 25 seconds if unzip java fails
      pause:
        seconds: 25
      when: unzip_java.rc != 0

    - name: rerun - unzip java file if first fails
      command: "tar -xzvf {{ temp_folder }}/{{ java_download_filename }} -C {{ java_installation_folder }}"
      args:
        creates: "{{ java_bin }}"
      become: yes
      when: unzip_java.rc != 0

  when: not java_exists.stat.exists or java_needs_replacement | default(false)


# set java to global environment path

- name: 
  block:

    - name: make sure ~/.bashrc exists
      stat:
        path: ~/.bashrc
      register: bashrc_exists
    
    - name: create if ~/.bashrc not exists
      file:
        path: ~/.bashrc
        state: touch
      when: not bashrc_exists.stat.exists
    
    - name: Set JAVA_HOME
      lineinfile:
        dest: ~/.bashrc
        state: present
        regexp: "^export JAVA_HOME="
        line: "export JAVA_HOME={{ java_home }}"
    
    - name: Set JAVA PATH
      lineinfile:
        dest: ~/.bashrc
        state: present
        regexp: "^export PATH="
        line: "export PATH={{ java_home }}/Contents/Home/bin:/usr/local/bin:$PATH"
    
    - name: add bashrc to bash_profile
      lineinfile:
        dest: ~/.bash_profile
        state: present
        regexp: "if [ -f ~/.bashrc ]"
        line: "if [ -f ~/.bashrc ]; then . ~/.bashrc; fi"
        insertbefore: BOF

  when: update_java_path == True

# validate java

- name: make sure java is installed on the machine
  command: "{{ java_bin }} -version"
  register: java_test
  ignore_errors: yes

- name: fail if java is not found
  fail:
    msg: java must be accesible in path
  when: java_test.rc != 0

# expose role output 

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      java_home: "{{ java_home }}"
      java_bin: "{{ java_bin }}"